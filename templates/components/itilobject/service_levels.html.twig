{#
 # ---------------------------------------------------------------------
 #
 # GLPI - Gestionnaire Libre de Parc Informatique
 #
 # http://glpi-project.org
 #
 # @copyright 2015-2025 Teclib' and contributors.
 # @licence   https://www.gnu.org/licenses/gpl-3.0.html
 #
 # ---------------------------------------------------------------------
 #
 # LICENSE
 #
 # This file is part of GLPI.
 #
 # This program is free software: you can redistribute it and/or modify
 # it under the terms of the GNU General Public License as published by
 # the Free Software Foundation, either version 3 of the License, or
 # (at your option) any later version.
 #
 # This program is distributed in the hope that it will be useful,
 # but WITHOUT ANY WARRANTY; without even the implied warranty of
 # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 # GNU General Public License for more details.
 #
 # You should have received a copy of the GNU General Public License
 # along with this program.  If not, see <https://www.gnu.org/licenses/>.
 #
 # ---------------------------------------------------------------------
 #}

{% import 'components/form/fields_macros.html.twig' as fields %}

{#
field_options est défini dans fields_panel.html.twig
field_options.fields_template est un ITILTemplate passé dans l'appel du twig dans Ticket::showForm() (param itiltemplate)
#}

{# sla display #}

{#
--- SLA display
At the moment, there is 2 sla for a ticket, defined inside the ticket fields
So there can be only 2 sla fields, one for TTO and one for TTR
if no tto : display empty field first, before existing slas
if no ttr : display empty field last, after existing slas

--- OLA display
Handle only linked ola, not ola ttr and tto defined using datetime fields

    sla & ola are instances of SLA and OLA, maybe from db, maybe empty
#}

{# mark form to handle la updates : _olas_id field should be handled in form submission #}
{{ fields.hiddenField('_la_update', 1) }}

{# --- SLA --- #}

{% set ticket_has_associated_ttr_sla = false %}
{% set ticket_has_associated_tto_sla = false %}
{% set associated_slas = item.getSlasData() %}

{% for sla in associated_slas %}
    {% if sla.type == constant('SLM::TTO') %}
        {% set ticket_has_associated_tto_sla = true %}
    {% elseif sla.type == constant('SLM::TTR') %}
        {% set ticket_has_associated_ttr_sla = true %}
    {% endif %}
{% endfor %}

<table class="table">
    <thead>
    <tr class="">
        <th class="visually-hidden"></th>
        <th class="border-0 fs-4">{{ __('SLA') }}</th>
    </tr>
    </thead>
    <tbody>

    {% if not ticket_has_associated_tto_sla %}
        <tr>
            {% set display_datetime_field  = field_options.fields_template is not defined or not field_options.fields_template.isHiddenField('time_to_own') %}
            {% set display_associatedsla_field = field_options.fields_template is not defined or not field_options.fields_template.isHiddenField('slas_id_tto') %}
            {% set can_assign_sla_ola = canupdate and has_profile_right('slm', constant('SLM::RIGHT_ASSIGN')) and not field_options.fields_template.isReadonlyField('slas_id_tto') %}

            {# @todo cleanup debug - force display #}
{#            {% set display_datetime_field  = true %}#}
{#            {% set display_associatedsla_field = true %}#}

{#            {% set _fieldname = 'time_to_own' %}#}
            <td class="right pe-2 align-middle border-0">{{ __('TTO') }}</td>
            <td class="d-flex ms-n2 border-0 py-0">

                {% set _rand = random() %}

                {# state flag #}
                <div class="align-middle my-2 me-2">
                    <i class="ti ti-flag"></i>
                </div>

                {# datetime field #}
                {% if display_datetime_field %}
                    {{ _self.DatetimeLaField('time_to_own',
                        item.fields['time_to_own'],
                        __('TTO'),
                        {
                            'rand': _rand,
                            'disabled': not can_assign_sla_ola
                        }) }}
                {% endif %}

                {# no linked tto : display add button + hidden dropdown #}
                {% if display_associatedsla_field and can_assign_sla_ola %}
                    {{ _self.LinkedLaFieldEmpty(
                        tto_sla,
                        item,
                        'slas_id_tto',
                        tto_sla.getAddConfirmation(),
                        constant('SLM::TTO'),
                        options = {
                            'can_assign': can_assign_sla_ola,
                            'rand': _rand,
                        }
                    ) }}
                {% endif %}
            </td>
        </tr>
    {% endif %}

    {# use slas from associated_slas and not from ttr_sla to allow easier refactoring if later, we allow multiple ola #}
    {% for sla in associated_slas %}
        <tr>
            {% if sla.type == constant('SLM::TTO') %}
                {% set display_datetime_field  = field_options.fields_template is not defined or not field_options.fields_template.isHiddenField('time_to_own') %}
                {% set display_associatedsla_field = field_options.fields_template is not defined or not field_options.fields_template.isHiddenField('slas_id_tto') %}
                {% set can_assign_sla_ola = canupdate and has_profile_right('slm', constant('SLM::RIGHT_ASSIGN')) and not field_options.fields_template.isReadonlyField('slas_id_tto') %}
                {% set _fieldname = 'time_to_own' %}
                {% set _label = __('TTO') %}
            {% elseif sla.type == constant('SLM::TTR') %}
                {% set display_datetime_field  = field_options.fields_template is not defined or not field_options.fields_template.isHiddenField('time_to_resolve') %}
                {% set display_associatedsla_field  = field_options.fields_template is not defined or not field_options.fields_template.isHiddenField('slas_id_ttr') %}
                {% set can_assign_sla_ola = canupdate and has_profile_right('slm', constant('SLM::RIGHT_ASSIGN')) and not field_options.fields_template.isReadonlyField('slas_id_ttr') %}
                {% set _fieldname = 'time_to_resolve' %}
                {% set _label = __('TTR') %}
            {% endif %}
            {% set _rand = random() %}

            {# @todo cleanup supprimer forcage de debug #}
{#            {% set display_datetime_field      = true %}#}
{#            {% set display_associatedsla_field = true %}#}

            <td class="right pe-2 align-middle border-0">{{ _label }}</td>
            <td class="d-flex ms-n2 border-0 py-0">
                {# state flag #}
                <div class="align-middle my-2 me-2">
                    <i class="ti ti-flag"></i>
                </div>

                {# datetime field + badge/dropdown field #}
                {{ _self.linkedSlaField(
                    sla,
                    field_options|merge({
                        'can_assign': can_assign_sla_ola,
                        'rand': _rand,
                        'new_item': item.isNewItem(),
                        'display_datetime_field': display_datetime_field,
                        'display_associatedsla_field': display_associatedsla_field
                    })
                ) }}
            </td>
        </tr>
    {% endfor %}

    {% if not ticket_has_associated_ttr_sla %}
        <tr>
            {% set display_datetime_field  = field_options.fields_template is not defined or not field_options.fields_template.isHiddenField('time_to_resolve') %}
            {% set display_associatedsla_field = field_options.fields_template is not defined or not field_options.fields_template.isHiddenField('slas_id_ttr') %}
            {% set can_assign_sla_ola = canupdate and has_profile_right('slm', constant('SLM::RIGHT_ASSIGN')) and not field_options.fields_template.isReadonlyField('slas_id_ttr') %}
            {# @todo cleanup - debug - force display #}
{#            {% set display_datetime_field  = true %}#}
{#            {% set display_associatedsla_field = true %}#}

{#            {% set _fieldname = 'time_to_resolve' %}#}
            <td class="right pe-2 align-middle border-0">{{ __('TTR') }}</td>
            <td class="d-flex ms-n2 border-0 py-0">

                {% set _rand = random() %}
                {# state flag #}
                <div class="align-middle my-2 me-2">
                    <i class="ti ti-flag"></i>
                </div>

                {# datetime field #}
                {% if display_datetime_field %}
                    {{ _self.DatetimeLaField('time_to_resolve',
                        item.fields['time_to_resolve'],
                        __('TTR'),
                        {
                            'rand': _rand,
                            'disabled': not can_assign_sla_ola
                        }) }}
                {% endif %}

                {# no linked ttr : display add button + hidden dropdown #}
                {% if display_associatedsla_field and can_assign_sla_ola %}
                    {{ _self.LinkedLaFieldEmpty(ttr_sla,
                        item,
                        'slas_id_ttr',
                        ttr_sla.getAddConfirmation(),
                        constant('SLM::TTR'),
                        options = {
                            'can_assign': can_assign_sla_ola,
                            'rand': _rand,
                        }) }}
                {% endif %}
            </td>
        </tr>
    {% endif %}
    </tbody>

{# --------- OLA display ---------- #}
    <thead>
    <tr class="">
        <th class="visually-hidden"></th>
        <th class="border-0 fs-4">
            <div class="d-flex justify-content-between">
                <div class="">{{ __('OLA') }}</div>
                <div>{{ _self.OlaAddButton('ola_dropdown_placeholder', field_options) }}</div>
            </div>
        </th>
    </tr>
    </thead>
    <tbody>
{% for ola in item.getOlasData() %}
    <tr>
        {% if ola.type == constant('SLM::TTO') %}
{#            {% set display_datetime_field  = field_options.fields_template is not defined or not field_options.fields_template.isHiddenField('time_to_own') %}#}
            {# @todo voir comment gérer ce choix d'afficher ou pas selon une config #}
{#            {% set display_associatedsla_field = field_options.fields_template is not defined or not field_options.fields_template.isHiddenField('slas_id_tto') %}#}
{#            {% set _fieldname = 'time_to_own' %}#}
            {% set can_assign_sla_ola = canupdate and has_profile_right('slm', constant('SLM::RIGHT_ASSIGN')) and not field_options.fields_template.isReadonlyField('olas_id_tto') %}
            {% set _label = __('TTO') %}
        {% elseif ola.type == constant('SLM::TTR') %}
{#            {% set display_datetime_field  = field_options.fields_template is not defined or not field_options.fields_template.isHiddenField('time_to_resolve') %}#}
{#            {% set display_associatedsla_field  = field_options.fields_template is not defined or not field_options.fields_template.isHiddenField('slas_id_ttr') %}#}
{#            {% set _fieldname = 'time_to_resolve' %}#}
            {% set can_assign_sla_ola = canupdate and has_profile_right('slm', constant('SLM::RIGHT_ASSIGN')) and not field_options.fields_template.isReadonlyField('olas_id_ttr') %}
            {% set _label = __('TTR') %}
        {% endif %}
{#        {% set _value = item.fields[_fieldname] %}#}
        {% set _rand = random() %}

        {# @todo supprimer forcage de debug #}
        {% set display_datetime_field      = true %}
        {% set display_associatedsla_field = true %}

        <td class="right pe-2 align-middle border-0">{{ _label }}</td>
        <td class="d-flex ms-n2 border-0 py-0">
            {{ _self.linkedOlaField(
                ola,
                field_options|merge({
                    'can_assign': can_assign_sla_ola,
                    'rand': _rand,
                    'new_item': item.isNewItem(),
                    'display_datetime_field': false,
                    'display_associatedsla_field': display_associatedsla_field
                })
            ) }}
        </td>
    </tr>
{% endfor %}
    <tr>
        <td>&nbsp;</td>
        {# id used by OlaAddButton() - display ajax fetched dropdown #}
        <td id="ola_dropdown_placeholder">
        </td>
    </tr>
    </tbody>

</table>

{# --- Macros --- #}


{# la param should match format provided by \Ticket::getAssociatedSlas() #}
{% macro linkedOlaField(la, options = {}) %}
    {% set options = {
        'can_assign': false,
        'is_expanded': false,
        'new_item': false,
        'display_datetime_field': false,
        'display_associatedsla_field': false,
        'rand': 'please_pass_a_rand'
    }|merge(options) %}

    {% set assign_la_id = 'assign_la_' ~ options.rand %}

    <div class="{{ options.new_item ? '' : 'collapsed' }} w-100 mt-1" id="dropdown_{{ assign_la_id }}">
        {% if options.display_datetime_field %}
            <span class="text-muted">
                      {{ la.due_time|formatted_datetime }}
             </span>
        {% endif %}

        {% if options.display_associatedsla_field %}
            <span class="level_name badge itil-badge bg-body border-info ms-1 flex-column flex-sm-row">
                <span class="d-flex align-items-center">
                     <i class="ti ti-stopwatch slt me-1"></i>
                     <span class="text-truncate"
                           title="{{ get_item_comment(la.class, la.olas_id) }}"
                           data-bs-toggle="tooltip" data-bs-placement="top">
                            {{ la.name }}
                     </span>
                </span>

                {% if la.level != false %}
                    <span class="badge bg-info-lt ms-0 ms-sm-1">
                        <i class="ti ti-clock me-1"
                           title="{{ __('Next escalation: %s')|format(la.nextaction.fields['date']|formatted_datetime) }}"
                           data-bs-toggle="tooltip" data-bs-placement="top"></i>
                        <span title="{{ __('%1$s: %2$s')|format(_n('Escalation level', 'Escalation levels', 1), get_item_name(la.level)) }}"
                              data-bs-toggle="tooltip" data-bs-placement="top">
                           {{ get_item_name(la.level) }}
                        </span>
                    </span>
                {% endif %}

                {# inserer le groupe assigné ici #}
            </span>

            {# remove button - la association #}
        {% if options.can_assign %}
            <i class="ti ti-trash ms-1" role="button"
               onclick="delete_date_{{ options.rand }}(event)"
               title="{{ _x('button', 'Delete permanently') }}"
               data-bs-toggle="tooltip" data-bs-placement="top"></i>
        {% endif %}

            {# javascript for remove button #}
            <script type="text/javascript">
                function delete_date_{{ options.rand }}(e) {
                    e.preventDefault();

                    var delete_date = 0;
                    if (confirm('{{ __('Also delete date?') }}')) {
                        delete_date = 1;
                    }

                    submitGetLink('{{ la.item.getFormURL() }}', {
                        'ola_delete': 1,
                        'id': {{ la.item.fields['id'] }},
                        'type': {{ la.type }},
                        'la_id': {{ la.olas_id }},
                        '_glpi_csrf_token': '{{ csrf_token() }}',
                        '_glpi_simple_form': 1,
                        'delete_date': delete_date
                    });
                }
            </script>
        {% endif %}

        {# hidden input field to preserve olas on update #}
        <input type="hidden"   name="_olas_id[]" value="{{ la.olas_id }}" />
    </div>

    {# <span>Nouveau design à implémenter Ola field à implementer</span> #}
    {# tto/ttr type #}
    {#    {{ la.type }} #}

    {# icon #}
    {# static #}

    {# flag #}
    {# static #}

    {# due_datetime #}
    {#        {{ la.due_time|formatted_datetime }} #}

    {# info bloc #}

    {# slm/slt #}
    {# @todo ajout du slt  #}
    {# icon #}
    {# name #}
    {#            {{ la.slm.name }} #}

    {# escalation #}

    {# icon #}
    {# name #}
    {#            {{ la.escalation.name }} #}

    {# group #}
    {# icon #}
    {# name #}
    {#            {{ la.group.name }} #}

    {# trash icon #}
{% endmacro %}

{# la param should match format provided by \Ticket::getAssociatedSlas() #}
{% macro linkedSlaField(la, options = {}) %}
    {% set options = {
        'can_assign': false,
        'is_expanded': false,
        'new_item': false,
        'display_datetime_field': false,
        'display_associatedsla_field': false,
        'rand': 'please_pass_a_rand'
    }|merge(options) %}

    {% set assign_la_id = 'assign_la_' ~ options.rand %}

    <div class="{{ options.new_item ? '' : 'collapsed' }} w-100 mt-1" id="dropdown_{{ assign_la_id }}">
        {% if options.display_datetime_field %}
            <span class="text-muted">
                      {{ la.due_time|formatted_datetime }}
             </span>
        {% endif %}

        {% if options.display_associatedsla_field %}
            <span class="level_name badge itil-badge bg-body border-info ms-1 flex-column flex-sm-row">
                <span class="d-flex align-items-center">
                     <i class="ti ti-stopwatch slt me-1"></i>
                     <span class="text-truncate"
                           title="{{ get_item_comment(la.class, la.id) }}"
                           data-bs-toggle="tooltip" data-bs-placement="top">
                            {{ la.name }}
                     </span>
                </span>

                {% if la.level != false %}
                    <span class="badge bg-info-lt ms-0 ms-sm-1">
                        <i class="ti ti-clock me-1"
                           title="{{ __('Next escalation: %s')|format(la.nextaction.fields['date']|formatted_datetime) }}"
                           data-bs-toggle="tooltip" data-bs-placement="top"></i>
                        <span title="{{ __('%1$s: %2$s')|format(_n('Escalation level', 'Escalation levels', 1), get_item_name(la.level)) }}"
                              data-bs-toggle="tooltip" data-bs-placement="top">
                           {{ get_item_name(la.level) }}
                        </span>
                    </span>
                {% endif %}

                {# inserer le groupe assigné ici #}
            </span>

            {# remove button - la association #}
        {% if options.can_assign %}
            <i class="ti ti-trash ms-1" role="button"
               onclick="delete_date_{{ options.rand }}(event)"
               title="{{ _x('button', 'Delete permanently') }}"
               data-bs-toggle="tooltip" data-bs-placement="top"></i>
        {% endif %}

            {# javascript for remove button #}
            <script type="text/javascript">
                function delete_date_{{ options.rand }}(e) {
                    e.preventDefault();

                    var delete_date = 0;
                    if (confirm('{{ __('Also delete date?') }}')) {
                        delete_date = 1;
                    }

                    submitGetLink('{{ la.item.getFormURL() }}', {
                        'sla_delete': 1,
                        'id': {{ la.item.fields['id'] }},
                        'type': {{ la.type }},
                        'la_id': {{ la.id }},
                        '_glpi_csrf_token': '{{ csrf_token() }}',
                        '_glpi_simple_form': 1,
                        'delete_date': delete_date
                    });
                }
            </script>
        {% endif %}
    </div>

    {# <span>Nouveau design à implémenter Ola field à implementer</span> #}
    {# tto/ttr type #}
    {#    {{ la.type }} #}

    {# icon #}
    {# static #}

    {# flag #}
    {# static #}

    {# due_datetime #}
    {#        {{ la.due_time|formatted_datetime }} #}

    {# info bloc #}

    {# slm/slt #}
    {# @todo ajout du slt  #}
    {# icon #}
    {# name #}
    {#            {{ la.slm.name }} #}

    {# escalation #}

    {# icon #}
    {# name #}
    {#            {{ la.escalation.name }} #}

    {# group #}
    {# icon #}
    {# name #}
    {#            {{ la.group.name }} #}

    {# trash icon #}
{% endmacro %}

{% macro LinkedLaFieldEmpty(la, item, name, add_confirmation_message, type, options = {}) %}
    {% set options = {
        'can_assign': false,
        'is_expanded': false,
        'rand': 'please_provided_a_rand_in_LinkedLaFieldEmpty',
    }|merge(options) %}

    {% set assign_la_id = 'assign_la_' ~ options.rand %}

    <div class="w-100 mt-1 d-none" id="dropdown_assign_la_{{ assign_la_id }}">
        {{ fields.dropdownField(
            la.getType(),
            name,
            0,
            '',
            {
                'include_field': false,
                'entity': item.fields['entities_id']|default(0),
                'condition': {'type': type},
                'disabled': (not options.can_assign),
                'add_field_class': (options.is_expanded ? 'col-sm-6' : ''),
            }
        ) }}
    </div>

    <button class="btn btn-sm btn-ghost-secondary ms-1" type="button"
            id="button_{{ assign_la_id }}"
            data-bs-toggle="modal"
            data-bs-target="#{{ assign_la_id }}"
            aria-expanded="false"
            aria-controls="{{ assign_la_id }}">
        <i class="ti ti-stopwatch slt pointer"
           title="{{ __('Assign a SLA') }}"
           data-bs-toggle="tooltip" data-bs-placement="top"></i>
    </button>

    {% import 'components/form/modals_macros.html.twig' as modals %}
    {{ modals.confirm(
        __('Warning'),
        add_confirmation_message|join('<br />'),
        {
            'id': assign_la_id,
            'confirm_label': '<i class="ti ti-stopwatch me-1"></i>' ~ __('Assign'),
            'confirm_event': 'toggleAssignLA_' ~ assign_la_id ~ '()',
        }|merge(options)
    ) }}

    <script type="text/javascript">
        function toggleAssignLA_{{ assign_la_id }}() {
            // hide button clicked
            $("#button_{{ assign_la_id }}").hide();

            // hide date field
            $("#date_{{ assign_la_id }}").closest('.la_datefield').hide();

            // show dropdown field
            $('#dropdown_assign_la_{{ assign_la_id }}').removeClass('d-none');
        }
    </script>
{% endmacro %}

{# @todo pas forcément utile, peut-être inliné #}
{% macro DatetimeLaField(name, value, label, options = {}) %}
    {% set assign_la_id = 'assign_la_' ~ options.rand %}
    <div class="la_datefield">
        {{ fields.datetimeField(
            name,
            value,
            label,
            {
                'include_field': false,
                'id': 'date_' ~ assign_la_id,
            }|merge(options)
        ) }}
    </div>
{% endmacro %}

{# @todo document le param dropdown_dom_id est le id du template de dropdown#}
{% macro OlaAddButton(dropdown_placeholder_dom_id, options = {}) %}
    {% set options = {
        'rand': random(),
        'is_expanded': false,
    }|merge(options) %}
    {% set rand = 'ola_add_' ~ options.rand ~ '_' %}
    {% set button_id = 'add_button_' ~ rand %}

    {# display button #}
    <button class="btn btn-sm btn-ghost-secondary ms-1" type="button"
            id="{{ button_id }}"
            {#            data-bs-toggle="modal"#}
            {#            data-bs-target="#{{ assign_la_id }}"#}
            aria-expanded="false"
            {#            aria-controls="{{ assign_la_id }}"#}
    >
        <i class="ti ti-plus slt pointer"
           title="{{ __('Add') }}"
           data-bs-toggle="tooltip" data-bs-placement="top"></i>
        {{ __('Add') }}
    </button>


    {# show new ola dropdown - ajax request #}
    <script>
        // make dropdown visible
        $(() => {
                $("#{{ button_id }}").on('click', () => {
                    $.get(
                        "{{ path('/dropdown') }}",
                        {
                            'itemtype': 'OLA',
                            'fieldname': '_olas_id[]',
                            'label': '{{ __('OLA') }}',
                        },
                        (html) => {
                            $('#{{ dropdown_placeholder_dom_id }}').append(html);
                        }
                    );
                });
            }
        );
    </script>

{% endmacro %}
